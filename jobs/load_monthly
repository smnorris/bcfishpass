#!/bin/bash
set -euxo pipefail

#-------
# monthly data refresh
#-------

PSQL="psql $DATABASE_URL -v ON_ERROR_STOP=1"

# bcdata loads
# ----
jq -c '.[]' bcgw_sources.json | while read item; do
    schedule=$(jq -r '.schedule' <<< "$item")
    source=$(jq -r '.source' <<< "$item")
    if [ "$schedule" == "M" ] ; then
      echo "Loading $source from cache"

      ogr2ogr -f PostgreSQL \
        "PG:$DATABASE_URL" \
        --config OGR_TRUNCATE=YES \
        -append \
        -nln $source \
        /vsis3/bchamp/bcdata/$source.parquet \
        $source
    fi
done

# load DRA from bchamp bucket (with public portion of source transport_line schema)
$PSQL -c "drop table if exists bcdata.transport_line" # in case of any failed loads
ogr2ogr \
  -f PostgreSQL \
  "PG:$DATABASE_URL" \
  --config PG_USE_COPY YES \
  -lco GEOMETRY_NAME=geom \
  -lco FID=transport_line_id \
  -nln bcdata.transport_line \
  /vsizip//vsicurl/https://nrs.objectstore.gov.bc.ca/bchamp/transport_line.gpkg.zip \
  TRANSPORT_LINE
$PSQL -c "truncate whse_basemapping.transport_line;
          insert into whse_basemapping.transport_line
          (
            transport_line_id,
            custodian_partner_org,
            capture_date,
            data_capture_method_code,
            total_number_of_lanes,
            structured_name_1,
            structured_name_2,
            structured_name_3,
            structured_name_4,
            structured_name_5,
            highway_route_1,
            highway_exit_number,
            transport_line_type_code,
            transport_line_surface_code,
            transport_line_structure_code,
            geom
          )
          select
            transport_line_id,
            custodian_partner_org,
            capture_date,
            data_capture_method_code,
            total_number_of_lanes,
            structured_name_1,
            structured_name_2,
            structured_name_3,
            structured_name_4,
            structured_name_5,
            highway_route_1,
            highway_exit_number,
            transport_line_type_code,
            transport_line_surface_code,
            transport_line_structure_code,
            geom
      from bcdata.transport_line"
$PSQL -c "drop table bcdata.transport_line"

# parcel fabric, renaming download so it can be read without unzipping
# ----
curl \
  -o /tmp/pmbc_parcel_fabric_poly_svw.gdb.zip \
  https://pub.data.gov.bc.ca/datasets/4cf233c2-f020-4f7a-9b87-1923252fbc24/pmbc_parcel_fabric_poly_svw.zip

ogr2ogr \
   -f PostgreSQL \
   PG:$DATABASE_URL \
   --config PG_USE_COPY YES \
   -overwrite \
   -t_srs EPSG:3005 \
   -dim XY \
   -lco GEOMETRY_NAME=geom \
   -lco FID=PARCEL_FABRIC_POLY_ID \
   -nln bcdata.pmbc_parcel_fabric_poly_svw \
   /tmp/pmbc_parcel_fabric_poly_svw.gdb.zip \
   pmbc_parcel_fabric_poly_svw

# load to target & drop temp (note that schemas do not quite match)
$PSQL -c "truncate whse_cadastre.pmbc_parcel_fabric_poly_svw;
          insert into whse_cadastre.pmbc_parcel_fabric_poly_svw (
            parcel_fabric_poly_id ,
            parcel_name           ,
            plan_number           ,
            pin                   ,
            pid_number            ,
            parcel_status         ,
            parcel_class          ,
            owner_type            ,
            parcel_start_date     ,
            municipality          ,
            regional_district     ,
            when_updated          ,
            geom
          )
          select
            parcel_fabric_poly_id ,
            parcel_name           ,
            plan_number           ,
            pin                   ,
            pid                   ,
            parcel_status         ,
            parcel_class          ,
            owner_type            ,
            parcel_start_date     ,
            municipality          ,
            regional_district     ,
            when_updated          ,
            geom
          from bcdata.pmbc_parcel_fabric_poly_svw"
$PSQL -c "drop table bcdata.pmbc_parcel_fabric_poly_svw"

# additional processing
# ----
$PSQL -c "refresh materialized view bcdata.parks"
# range view is too resource intensive for some clients - schedule this job elsewhere
#$PSQL -c "refresh materialized view bcdata.ften_range_poly_carto_vw"



